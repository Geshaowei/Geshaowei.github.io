<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>lua</title>
    <link href="/2024/04/23/lua/"/>
    <url>/2024/04/23/lua/</url>
    
    <content type="html"><![CDATA[<h1 id="Lua学习之路"><a href="#Lua学习之路" class="headerlink" title="Lua学习之路"></a>Lua学习之路</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="特殊"><a href="#特殊" class="headerlink" title="特殊"></a>特殊</h4>]]></content>
    
    
    
    <tags>
      
      <tag>游戏开发lua脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&#39;设计模式&#39;</title>
    <link href="/2024/04/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/04/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="游戏开发设计模式的使用案例"><a href="#游戏开发设计模式的使用案例" class="headerlink" title="游戏开发设计模式的使用案例"></a>游戏开发设计模式的使用案例</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>思想：对类的构造函数进行私有话，提供一个静态类，并且封装好对外调用的静态数据以及函数。使之成为唯一对象。</p><h3 id="监听者模式"><a href="#监听者模式" class="headerlink" title="监听者模式"></a>监听者模式</h3><p>分为广播和监听两种成员。广播要掉用事件的Raise，监听者要有被监听者的引用，并且添加相应的事件。</p><h3 id="订阅发布"><a href="#订阅发布" class="headerlink" title="订阅发布"></a>订阅发布</h3><p>完全解耦合，不需要被监听者的引用。利用事件进行监听和广播。在开发中常用ScriptObject类文件生成相应的UnityAction或者UnityEvent类，用作中间间。都引用该类，实现广播和监听。</p><h4 id="工厂模式。"><a href="#工厂模式。" class="headerlink" title="工厂模式。"></a>工厂模式。</h4>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity3D</title>
    <link href="/2024/03/23/Unity3D/"/>
    <url>/2024/03/23/Unity3D/</url>
    
    <content type="html"><![CDATA[<p>关于2D横板序列帧动画游戏开发记录，重点技术涉及：2D精灵图片切割，Animation序列帧动画生成，Animator动画管理。基础UI设计，事件绑定，键盘事件监听，刚体组件加碰撞体触发器的使用。</p><h1 id="2D横板-像素-动作-闯关游戏设计"><a href="#2D横板-像素-动作-闯关游戏设计" class="headerlink" title="2D横板+像素+动作+闯关游戏设计"></a>2D横板+像素+动作+闯关游戏设计</h1><p>免费素材使用，重点使用2D序列帧动画</p><h2 id="精灵图片切割要点"><a href="#精灵图片切割要点" class="headerlink" title="精灵图片切割要点"></a>精灵图片切割要点</h2><p>图片像素需要根据原始像素进行切割，注意质量要原版质量.</p><h2 id="键盘监听事件"><a href="#键盘监听事件" class="headerlink" title="键盘监听事件"></a>键盘监听事件</h2><p>inputsystem的使用以及跳跃事件和键盘使用的绑定。</p><h2 id="Animation动画制作"><a href="#Animation动画制作" class="headerlink" title="Animation动画制作"></a>Animation动画制作</h2><p>首先创造Animator 进行动画管理，然后找到Animation动画制作pattle，根据面板进行创建，要点在于每秒多少帧，调节这个可以帮助动画的流畅度设计。</p><h2 id="Animator动画切换管理"><a href="#Animator动画切换管理" class="headerlink" title="Animator动画切换管理"></a>Animator动画切换管理</h2><p>Animator是动画的逻辑切换判断，在2D像素风格中，首先要做的就是把切换的等待设置为0，不适用动画切换等待，之后的就是设计每个动画的切换逻辑，特殊的在于触发器的使用，触发器是触发一次变转化一次动作。</p><p>还有一个要点是动画管理的脚本尽量单独使用，方便管理。</p><p>动画还可以设置多个管理层，有覆盖和优先级的设定，下面的weight要调整至1，防止被覆盖。《跳跃+攻击不在一个面板的话需要这样设置，以免不会同时调用》</p><h2 id="事件的绑定-UnityEvent"><a href="#事件的绑定-UnityEvent" class="headerlink" title="事件的绑定 UnityEvent"></a>事件的绑定 UnityEvent</h2><p>Unity 自带了一套事件绑定方法，使用UnityEvent头文件，生成的事件为Public，可以直接在Unity编辑器中进行拖拽绑定，然后使用.来进行调用这一系列事件，事件可以由多个方法组成，可以传入参数，使用的时候利用? 来检查时候有绑定的方法，以免报错。</p><h2 id="Rigbody2D-Collision-刚体加碰撞体"><a href="#Rigbody2D-Collision-刚体加碰撞体" class="headerlink" title="Rigbody2D+Collision 刚体加碰撞体"></a>Rigbody2D+Collision 刚体加碰撞体</h2><p>刚体组件使得物体有了物理性质，碰撞体使得物体有了可以碰撞的条件。碰撞体可以点击Is Trigger 选项，使之成为触发器，这样可以用于检测碰撞或者接触到一定范围的物体。</p><h2 id="IEnumerator-name-协程的使用"><a href="#IEnumerator-name-协程的使用" class="headerlink" title="IEnumerator name 协程的使用"></a>IEnumerator name 协程的使用</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-function">IEnumerator <span class="hljs-title">Onhurt</span>(<span class="hljs-params">Vector2 dir</span>)</span><br>&#123;<br>    rb.AddForce(dir * hurtForce, ForceMode2D.Impulse);<br>    <span class="hljs-function"><span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">WaitForSeconds</span>(<span class="hljs-params"><span class="hljs-number">0.45f</span></span>)</span>;<br>    isHurt = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">//调用</span><br>StartCoroutine(Onhurt(dir));<br></code></pre></td></tr></table></figure><h2 id="UI设计"><a href="#UI设计" class="headerlink" title="UI设计"></a>UI设计</h2><p>锚点的绑定。</p><p>##场景切换<br>利用了GameScenceSo的方法<br>currentLoadedScence.sceneReference.LoadSceneAsync(LoadSceneMode.Additive);</p><h2 id="游戏进度的存储"><a href="#游戏进度的存储" class="headerlink" title="游戏进度的存储"></a>游戏进度的存储</h2><p>ISaveable 接口的设计，实现Savedata 和Loaddata</p><p>Dictionary字典</p><p>保存数据Data 类</p><p>DataDefination设计字典存储物品的ID以及相关数值</p><p>DataManager的设计，单例模式，List保存DataDefination类。循环遍历并且加载数据。</p><p>JsonUtility.ToJson，序列化存储对象。</p><p>JsonUtility,FromJsonOverWrite(SceneToScave,newScene); 反序列化加载</p><p>&#x2F;&#x2F;URL-packges: com.unity&#x2F;nuget.newtonsoft-json     Newtonsoft Json</p>]]></content>
    
    
    
    <tags>
      
      <tag>2D游戏开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/2024/03/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2024/03/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>面试关于数据结构的细节题简单记录。</p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>求节点题：</p><p>1.任何一棵树，总结点树为N，除了根节点，每一个节点都有1条边。设度为0,1,2,3,4,5的节点数分别为n0,n1,n2,n3,n4,n5。</p><p>由边和节点的关系：N-1 &#x3D; 0<em>n0+1</em>n1+2<em>n2+3</em>n3+4<em>n4+5</em>n5；算出总的N &#x3D; 206。</p><p>有度的节点个数为n1+n2+n3+n4+n5 &#x3D;65。那么，叶子结点个数为n0 &#x3D; N- 65 &#x3D; 141。</p><p>2.遍历</p><p>左根右，中序</p><p>根左右，先序</p><p>左右根，后续</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#重点</title>
    <link href="/2024/03/13/CShape%E9%87%8D%E7%82%B9/"/>
    <url>/2024/03/13/CShape%E9%87%8D%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="H1面向对象原则"><a href="#H1面向对象原则" class="headerlink" title="H1面向对象原则"></a>H1面向对象原则</h1><p>封装继承多态</p><p>七大原则</p><p>开闭原则、依赖倒转原则、里氏替换原则、单一职责原则、接口隔离原则、合成复用原则、迪米特法则</p><h1 id="C-重点语法"><a href="#C-重点语法" class="headerlink" title="C#重点语法"></a>C#重点语法</h1><h2 id="基础语句"><a href="#基础语句" class="headerlink" title="基础语句"></a>基础语句</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C#">Console.WriteLine(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>Console.Write();<span class="hljs-comment">//仅打印后无换行</span><br><span class="hljs-comment">//区分大小写并且打印string 要用双引号</span><br></code></pre></td></tr></table></figure><ul><li>public：所有对象都可以访问；</li><li>private：对象本身在对象内部可以访问；</li><li>protected：只有该类对象及其子类对象可以访问</li><li>internal：同一个程序集的对象可以访问；</li><li>protected internal：访问限于当前程序集或派生自包含类的类型。</li></ul><h4 id="C-while-判断"><a href="#C-while-判断" class="headerlink" title="C# while 判断()"></a>C# while 判断()</h4><p>while(n–) 非法 必须使用 while(n–!&#x3D;0)</p><h2 id="代码：结构体和类的区别"><a href="#代码：结构体和类的区别" class="headerlink" title="代码：结构体和类的区别"></a>代码：结构体和类的区别</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Lesson25_</span>面向对象相关_结构体和类的区别<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;结构体和类的区别&quot;</span>);<br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 区别概述</span><br>            <span class="hljs-comment">//结构体和类最大的区别是在存储空间上的，因为结构体是值，类是引用，</span><br>            <span class="hljs-comment">//因此他们的存储位置一个在栈上，一个在堆上，</span><br>            <span class="hljs-comment">//通过之前知识点的学习，我相信你能够从此处看出他们在使用的区别——值和引用对象在赋值时的区别。</span><br><br>            <span class="hljs-comment">//结构体和类在使用上很类似，结构体甚至可以用面向对象的思想来形容一类对象。</span><br>            <span class="hljs-comment">//结构体具备着面向对象思想中封装的特性，但是它不具备继承和多态的特性，因此大大减少了它的使用频率。</span><br>            <span class="hljs-comment">//由于结构体不具备继承的特性，所以它不能够使用protected保护访问修饰符。</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 细节区别</span><br>            <span class="hljs-comment">//1.结构体是值类型，类是引用类型</span><br>            <span class="hljs-comment">//2.结构体存在栈中，类存在堆中</span><br>            <span class="hljs-comment">//3.结构体成员不能使用protected访问修饰符，而类可以</span><br>            <span class="hljs-comment">//4.结构体成员变量申明不能指定初始值，而类可以</span><br>            <span class="hljs-comment">//5.结构体不能申明无参的构造函数，而类可以</span><br>            <span class="hljs-comment">//6.结构体申明有参构造函数后，无参构造不会被顶掉</span><br>            <span class="hljs-comment">//7.结构体不能申明析构函数，而类可以</span><br>            <span class="hljs-comment">//8.结构体不能被继承，而类可以</span><br>            <span class="hljs-comment">//9.结构体需要在构造函数中初始化所有成员变量，而类随意</span><br>            <span class="hljs-comment">//10.结构体不能被静态static修饰（不存在静态结构体），而类可以</span><br>            <span class="hljs-comment">//11.结构体不能在自己内部申明和自已一样的结构体变量，而类可以</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 结构体的特别之处</span><br>            <span class="hljs-comment">//结构体可以继承 接口 因为接口是行为的抽象</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 如何选择结构体和类</span><br>            <span class="hljs-comment">//1.想要用继承和多态时，直接淘汰结构体，比如玩家、怪物等等</span><br>            <span class="hljs-comment">//2.对象是数据集合时，优先考虑结构体，比如位置、坐标等等</span><br>            <span class="hljs-comment">//3.从值类型和引用类型赋值时的区别上去考虑，比如经常被赋值传递的对象，并且</span><br>            <span class="hljs-comment">//改变赋值对象，原对象不想跟着变化时，就用结构体。比如坐标、向量、旋转等等</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Lesson26_</span>面向对象相关_抽象类和接口的区别<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;抽象类和接口的区别&quot;</span>);<br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 知识回顾</span><br>            <span class="hljs-comment">//抽象类和抽象方法</span><br>            <span class="hljs-comment">//abstract修饰的类和方法</span><br>            <span class="hljs-comment">//抽象类 不能实例化</span><br>            <span class="hljs-comment">//抽象方法只能在抽象类中申明 是个纯虚方法 必须在子类中实现</span><br><br>            <span class="hljs-comment">//接口</span><br>            <span class="hljs-comment">//interface 自定义类型</span><br>            <span class="hljs-comment">//是行为的抽象</span><br>            <span class="hljs-comment">//不包含成员变量</span><br>            <span class="hljs-comment">//仅包含方法、属性、索引器、事件，成员都不能实现，建议不写访问修饰符，默认public</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 知识点一 相同点</span><br>            <span class="hljs-comment">//1.都可以被继承</span><br>            <span class="hljs-comment">//2.都不能直接实例化</span><br>            <span class="hljs-comment">//3.都可以包含方法申明</span><br>            <span class="hljs-comment">//4.子类必须实现未实现的方法</span><br>            <span class="hljs-comment">//5.都遵循里氏替换原则</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 知识点二 区别</span><br>            <span class="hljs-comment">//1.抽象类中可以有构造函数；接口中不能</span><br>            <span class="hljs-comment">//2.抽象类只能被单一继承；接口可以被继承多个</span><br>            <span class="hljs-comment">//3.抽象类中可以有成员变量；接口中不能</span><br>            <span class="hljs-comment">//4.抽象类中可以申明成员方法，虚方法，抽象方法，静态方法；接口中只能申明没有实现的抽象方法</span><br>            <span class="hljs-comment">//5.抽象类方法可以使用访问修饰符；接口中建议不写，默认public</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 如何选择抽象类和接口</span><br>            <span class="hljs-comment">//表示对象的用抽象类，表示行为拓展的用接口</span><br>            <span class="hljs-comment">//不同对象拥有的共同行为，我们往往可以使用接口来实现</span><br>            <span class="hljs-comment">//举个例子：</span><br>            <span class="hljs-comment">//动物是一类对象，我们自然会选择抽象类；而飞翔是一个行为，我们自然会选择接口。</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/image/Unity3D/1713350961262.png" alt="1713350961262"></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="显示转换"><a href="#显示转换" class="headerlink" title="显示转换"></a>显示转换</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Lesson8_</span>练习题<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;类型转换——显示转换练习题&quot;</span>);<br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 练习题一</span><br>            <span class="hljs-comment">//显示类型转换有几种方式？他们分别是什么，请举例说明？</span><br>            <span class="hljs-comment">// 1.括号强转 数值之间的转换 低精度 装 高精度</span><br>            <span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">long</span> l = <span class="hljs-number">1</span>;<br>            i = (<span class="hljs-built_in">int</span>)l;<br><br>            <span class="hljs-built_in">float</span> f = <span class="hljs-number">1.1f</span>;<br>            <span class="hljs-built_in">double</span> d = <span class="hljs-number">1.231231231231231231231</span>;<br>            f = (<span class="hljs-built_in">float</span>)d;<br>            <span class="hljs-comment">// 2.Parse法 把字符串 转成 对应的类型 变量类型.Parse(字符串)</span><br>            i = <span class="hljs-built_in">int</span>.Parse(<span class="hljs-string">&quot;123&quot;</span>);<br>            <span class="hljs-comment">// 3.Convert法</span><br>            i = Convert.ToInt32(<span class="hljs-number">12.23123</span>);<br>            i = Convert.ToInt32(<span class="hljs-string">&quot;123123&quot;</span>);<br><br>            <span class="hljs-built_in">string</span> str = Convert.ToString(<span class="hljs-number">123123</span>);<br>            <span class="hljs-comment">// 4.toString法</span><br>            str = <span class="hljs-number">1.</span>ToString();<br>            str = <span class="hljs-number">1.23123f</span>.ToString();<br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 练习题二</span><br>            <span class="hljs-comment">//请将24069转成字符，并打印</span><br><br>            <span class="hljs-built_in">char</span> c = (<span class="hljs-built_in">char</span>)<span class="hljs-number">24069</span>;<br>            Console.WriteLine(c);<br><br>            c = Convert.ToChar(<span class="hljs-number">24069</span>);<br>            Console.WriteLine(c);<br><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 练习题三</span><br>            <span class="hljs-comment">//提示用户输入姓名、语文、数学、英语成绩，并将输入的3门成绩用整形变量存储</span><br>            Console.WriteLine(<span class="hljs-string">&quot;请输入你的姓名&quot;</span>);<br>            <span class="hljs-comment">//通过字符串变量 把输入内容存起来</span><br>            <span class="hljs-built_in">string</span> str2 = Console.ReadLine();<br><br>            Console.WriteLine(<span class="hljs-string">&quot;请输入你的语文成绩&quot;</span>);<br>            str2 = Console.ReadLine();<br><br>            <span class="hljs-comment">//再把字符串转为 想要的类型</span><br>            <span class="hljs-built_in">int</span> yuWen = <span class="hljs-built_in">int</span>.Parse(str2);<br>            <span class="hljs-comment">//Console.WriteLine(&quot;你的语文成绩：&quot; + yuWen);</span><br><br>            Console.WriteLine(<span class="hljs-string">&quot;请输入你的数学成绩&quot;</span>);<br>            str2 = Console.ReadLine();<br>            <span class="hljs-built_in">int</span> shuXue = <span class="hljs-built_in">int</span>.Parse(str2);<br>            <span class="hljs-comment">//Console.WriteLine(&quot;你的数学成绩：&quot; + shuXue);</span><br><br>            Console.WriteLine(<span class="hljs-string">&quot;请输入你的英语成绩&quot;</span>);<br>            str2 = Console.ReadLine();<br>            <span class="hljs-built_in">int</span> yingYu = <span class="hljs-built_in">int</span>.Parse(str2);<br>            <span class="hljs-comment">//Console.WriteLine(&quot;你的英语成绩：&quot; + yingYu);</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><code class="hljs Csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Lesson7_</span>类型转换_隐式转换_<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;类型转换——隐式转换&quot;</span>);<br>            <span class="hljs-comment">// 什么是类型转换</span><br><br>            <span class="hljs-comment">// 类型转换 就是不同变量类型之间的相互转换</span><br><br>            <span class="hljs-comment">// 隐式转换的基本规则——&gt;不同类型之间自动转换</span><br>            <span class="hljs-comment">// 大范围装小范围</span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 知识点一 相同大类型之间的转换</span><br><br>            <span class="hljs-comment">//有符号  long——&gt;int——&gt;short——&gt;sbyte</span><br>            <span class="hljs-built_in">long</span> l = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">short</span> s = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">sbyte</span> sb = <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//隐式转换 int隐式转换成了long</span><br>            <span class="hljs-comment">//可以用大范围 装小范围的 类型 （隐式转换）</span><br>            l = i;<br>            <span class="hljs-comment">//不能够用小范围的类型去装在大范围的类型</span><br>            <span class="hljs-comment">//i = l;</span><br>            l = i;<br>            l = s;<br>            l = sb;<br>            i = s;<br>            s = sb;<br><br>            <span class="hljs-comment">//无符号 ulong——&gt;uint——&gt;ushort——&gt;byte</span><br>            <span class="hljs-built_in">ulong</span> ul = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">uint</span> ui = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">ushort</span> us = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">byte</span> b = <span class="hljs-number">1</span>;<br><br>            ul = ui;<br>            ul = us;<br>            ul = b;<br>            ui = us;<br>            ui = b;<br>            us = b;<br><br>            <span class="hljs-comment">//浮点数  decimal    double——&gt;float</span><br>            <span class="hljs-built_in">decimal</span> de = <span class="hljs-number">1.1</span>m;<br>            <span class="hljs-built_in">double</span> d = <span class="hljs-number">1.1</span>;<br>            <span class="hljs-built_in">float</span> f = <span class="hljs-number">1.1f</span>;<br>            <span class="hljs-comment">//decimal这个类型 没有办法用隐式转换的形式 去存储 double和float</span><br>            <span class="hljs-comment">//de = d;</span><br>            <span class="hljs-comment">//de = f;</span><br>            <span class="hljs-comment">//float 是可以隐式转换成 double</span><br>            d = f;<br><br>            <span class="hljs-comment">//特殊类型  bool char string</span><br>            <span class="hljs-comment">// 他们之间 不存在隐式转换</span><br>            <span class="hljs-built_in">bool</span> bo = <span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">char</span> c = <span class="hljs-string">&#x27;A&#x27;</span>;<br>            <span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;123123&quot;</span>;<br><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 知识点二 不同大类型之间的转换</span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 无符号和有符号之间</span><br>            <span class="hljs-comment">//无符号 不能装负数的</span><br>            <span class="hljs-built_in">byte</span> b2 = <span class="hljs-number">1</span>; <span class="hljs-comment">//0~255</span><br>            <span class="hljs-built_in">ushort</span> us2 = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">uint</span> ui2 = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">ulong</span> ul2 = <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//有符号</span><br>            <span class="hljs-built_in">sbyte</span> sb2 = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">short</span> s2 = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">int</span> i2 = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">long</span> l2 = <span class="hljs-number">1</span>;<br><br>            <span class="hljs-comment">//无符号装有符号 </span><br>            <span class="hljs-comment">// 有符号的变量 是不能够 隐式转换成 无符号的</span><br>            <span class="hljs-comment">//b2 = sb2;</span><br>            <span class="hljs-comment">//us2 = sb2;</span><br>            <span class="hljs-comment">//ul2 = sb2;</span><br><br>            <span class="hljs-comment">//有符号装无符号 </span><br>            <span class="hljs-comment">// 有符号变量 是可以 装 无符号变量的 前提是 范围一定要是涵盖的 存在隐式转换</span><br>            <span class="hljs-comment">//i2 = ui2;//因为 有符号的变量 可能会超过 这个无符号变量的范围</span><br>            i2 = b2;<span class="hljs-comment">// 因为 有符号的变量 不管是多少 都在 无符号变量的范围内</span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 浮点数和整数（有、无符号）之间</span><br>            <span class="hljs-comment">//浮点数装整数 整形转为浮点数 是存在隐式转换的</span><br>            <span class="hljs-built_in">float</span> f2 = <span class="hljs-number">1.1f</span>;<br>            <span class="hljs-built_in">double</span> d2 = <span class="hljs-number">1.1</span>;<br>            <span class="hljs-built_in">decimal</span> de2 = <span class="hljs-number">1.1</span>m;<br><br>            <span class="hljs-comment">//浮点数 是可以装载任何类型的 整数的</span><br>            f2 = l2;<br>            f2 = i2;<br>            f2 = s2;<br>            f2 = sb2;<br><br>            f2 = ul2;<br>            f2 = ui2;<br>            f2 = us2;<br>            f2 = b2;<br><br>            f2 = <span class="hljs-number">10000000000000000000</span>;<br>            Console.WriteLine(f2);<br><br>            <span class="hljs-comment">//decimal 不能隐式存储 float和double</span><br>            <span class="hljs-comment">//但是它可以隐式的存储整形</span><br>            de = l2;<br>            de = ul2;<br><br>            <span class="hljs-comment">// double ——&gt; float ——&gt; 所有整形（无符号、有符号）</span><br>            <span class="hljs-comment">// decimal ——&gt; 所有整形（无符号、有符号）</span><br><br>            <span class="hljs-comment">//整数装浮点数 整数是不能隐式存储 浮点数  因为 整数 不能存小数</span><br>            <span class="hljs-comment">//i2 = f2;</span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 特殊类型和其它类型之间</span><br><br>            <span class="hljs-comment">//bool bool没有办法和其它类型 相互隐式转换</span><br>            <span class="hljs-built_in">bool</span> bo2 = <span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">char</span> c2 = <span class="hljs-string">&#x27;A&#x27;</span>;<br>            <span class="hljs-built_in">string</span> str2 = <span class="hljs-string">&quot;1231&quot;</span>;<br>            <span class="hljs-comment">//bo2 = i2;</span><br>            <span class="hljs-comment">//bo2 = ui2;</span><br>            <span class="hljs-comment">//bo2 = f2;</span><br><br>            <span class="hljs-comment">//i2 = bo2;</span><br>            <span class="hljs-comment">//ui2 = bo2;</span><br>            <span class="hljs-comment">//f2 = bo2;</span><br><br>            <span class="hljs-comment">//bo2 = c2;</span><br>            <span class="hljs-comment">//c2 = bo2;</span><br>            <span class="hljs-comment">//bo2 = str2;</span><br>            <span class="hljs-comment">//str2 = bo2;</span><br><br>            <span class="hljs-comment">//char char 没有办法隐式的存储 其它类型的变量</span><br>            <span class="hljs-comment">//c2 = i2;</span><br>            <span class="hljs-comment">//c2 = f2;</span><br>            <span class="hljs-comment">//c2 = ui2;</span><br>            <span class="hljs-comment">//c2 = str2;</span><br><br>            <span class="hljs-comment">//char类型 可以隐式的转换成 整形和浮点型</span><br>            <span class="hljs-comment">//char隐式转换成 数值类型是 </span><br>            <span class="hljs-comment">//对应的数字 其实是一个 ASCII码 </span><br>            <span class="hljs-comment">// 计算机里面存储 2进制</span><br>            <span class="hljs-comment">// 字符 中文 英文 标点符号 在计算机中都是一个数字</span><br>            <span class="hljs-comment">// 一个字符 对应一个数字 ASCII码就是一种对应关系</span><br>            i2 = c2;<br>            Console.WriteLine(i2);<br>            f2 = c2;<br>            Console.WriteLine(f2);<br>            ui2 = c2;<br>            Console.WriteLine(ui2);<br><br>            <span class="hljs-comment">//str2 = c2;</span><br><br>            <span class="hljs-comment">//string 类型 无法和其它类型进行隐式转换</span><br>            <span class="hljs-comment">//i2 = str2;</span><br>            <span class="hljs-comment">//ui2 = str2;</span><br>            <span class="hljs-comment">//f2 = str2;</span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br><br>            <span class="hljs-comment">// 总结 隐式转换 规则</span><br>            <span class="hljs-comment">// 高精度（大范围）装低精度（小范围）</span><br>            <span class="hljs-comment">// double ——&gt; float ——&gt; 整数（无符号、有符号）——&gt;char</span><br>            <span class="hljs-comment">// decimal ——&gt; 整数（无符号、有符号）——&gt;char</span><br>            <span class="hljs-comment">// string 和 bool 不参与隐式转换规则的</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++</title>
    <link href="/2024/03/11/c++/"/>
    <url>/2024/03/11/c++/</url>
    
    <content type="html"><![CDATA[<p>2024年对于C++部分重点梳理记录</p><p>开始学习~</p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><h3 id="常量const和constexpr"><a href="#常量const和constexpr" class="headerlink" title="常量const和constexpr"></a>常量const和constexpr</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> valuename = initvalue;<span class="hljs-comment">//声明不可修改常量存储同变量一样，但不可修改。</span><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">valuename</span><span class="hljs-params">()</span> </span>= &#123;<span class="hljs-keyword">return</span> valuename * <span class="hljs-number">2</span>;&#125; <span class="hljs-comment">//声明不可修改常量函数，类似函数。</span><br></code></pre></td></tr></table></figure><h3 id="枚举enum"><a href="#枚举enum" class="headerlink" title="枚举enum"></a>枚举enum</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CardinalDirections</span>&#123;<br>North = <span class="hljs-number">25</span>,<br>South,<br>East,<br>West<br>&#125;;<br><span class="hljs-comment">//cout&lt;&lt;South输出的值为26;</span><br></code></pre></td></tr></table></figure><h3 id="C-左值-右值引用"><a href="#C-左值-右值引用" class="headerlink" title="C++左值&#x2F;右值引用"></a>C++左值&#x2F;右值引用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>; <span class="hljs-comment">//a 是作，1是右值</span><br><span class="hljs-type">int</span>&amp;&amp; b  = <span class="hljs-number">1</span> ;<span class="hljs-comment">// 右值引用</span><br><span class="hljs-type">int</span>&amp; c = <span class="hljs-number">1</span>; <span class="hljs-comment">//左值引用</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; d = <span class="hljs-number">1</span> ; <span class="hljs-comment">//万能引用</span><br><span class="hljs-comment">//左值，不会因为运算后而消亡，有存储地址。 右值，临时常量。</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="完美转发"><a href="#完美转发" class="headerlink" title="完美转发"></a>完美转发</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp;&amp; x)</span></span>&#123;<br>&#125;<span class="hljs-comment">//无法接受左值</span><br><br>Tamplate &lt;T&amp;&amp; x&gt;<br><span class="hljs-built_in">fun1</span>(<span class="hljs-type">int</span>&amp; x)&#123;<br><span class="hljs-comment">//左值引用</span><br>&#125;<br><span class="hljs-built_in">fun1</span>(<span class="hljs-type">int</span>&amp;&amp; x)&#123;<br><span class="hljs-comment">//右值引用</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(T&amp;&amp; x)</span></span>&#123; <span class="hljs-comment">//可以接受左右值</span><br><span class="hljs-built_in">fun1</span>(std::forward(x))<span class="hljs-comment">//完美转发左右值/保持其值类型</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ STL</title>
    <link href="/2024/03/07/C++-STL/"/>
    <url>/2024/03/07/C++-STL/</url>
    
    <content type="html"><![CDATA[<h1 id="C-数据类型语法"><a href="#C-数据类型语法" class="headerlink" title="C++数据类型语法"></a>C++数据类型语法</h1><h2 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a>unordered_set</h2><h4 id="引入头文件"><a href="#引入头文件" class="headerlink" title="引入头文件"></a>引入头文件</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="unordered-set是什么"><a href="#unordered-set是什么" class="headerlink" title="unordered_set是什么"></a>unordered_set是什么</h4><p>unordered_set 容器，可直译为“无序 set 容器”。即 unordered_set 容器和 set 容器很像，唯一的区别就在于 set 容器会自行对存储的数据进行排序，而 unordered_set 容器不会。</p><h4 id="unordered-set的几个特性："><a href="#unordered-set的几个特性：" class="headerlink" title="unordered_set的几个特性："></a><strong>unordered_set的几个特性：</strong></h4><ol><li>不再以键值对的形式存储数据，而是直接存储数据的值 ；</li><li>容器内部存储的各个元素的值都互不相等，且不能被修改；</li><li>不会对内部存储的数据进行排序</li></ol><h4 id="unordered-set的初始化"><a href="#unordered-set的初始化" class="headerlink" title="unordered_set的初始化"></a>unordered_set的初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">unordered_set&lt;<span class="hljs-type">int</span>&gt; set1;<span class="hljs-comment">//创建</span><br><span class="hljs-function">unordered_set&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">set2</span><span class="hljs-params">(set1)</span></span>;<span class="hljs-comment">//copy</span><br><span class="hljs-function">unordered_set&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">set3</span><span class="hljs-params">(set1.begin(), set1.end())</span></span>;<span class="hljs-comment">//使用迭代器构造</span><br><span class="hljs-function">unordered_set&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">set4</span><span class="hljs-params">(arr,arr+<span class="hljs-number">5</span>)</span></span>;<span class="hljs-comment">//使用数组作为其初值进行构造</span><br><span class="hljs-function">unordered_set&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">set5</span><span class="hljs-params">(move(set2))</span></span>;<span class="hljs-comment">//移动构造</span><br>unordered_set&lt;<span class="hljs-type">int</span>&gt; set6 &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>&#125;;<span class="hljs-comment">//使用处置列表</span><br></code></pre></td></tr></table></figure><h4 id="unordered-set常用函数"><a href="#unordered-set常用函数" class="headerlink" title="unordered_set常用函数"></a>unordered_set常用函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++">set1.<span class="hljs-built_in">empty</span>();<span class="hljs-comment">//判断是否位空 是 True 否 Flase;</span><br>set1.<span class="hljs-built_in">find</span>(<span class="hljs-number">2</span>);<span class="hljs-comment">//查找，//查找2，找到返回迭代器，失败返回end()</span><br>set1.<span class="hljs-built_in">count</span>(<span class="hljs-number">2</span>);<span class="hljs-comment">//返回0 1；</span><br><span class="hljs-comment">//插入元素，返回pair&lt;unordered_set&lt;int&gt;::iterator, bool&gt;</span><br>set1.<span class="hljs-built_in">insert</span>(<span class="hljs-number">3</span>);<br><span class="hljs-comment">//使用initializer_list插入元素</span><br>set1.<span class="hljs-built_in">insert</span>(&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;);<br><span class="hljs-comment">//指定插入位置，如果位置正确会减少插入时间，返回指向插入元素的迭代器</span><br>set1.<span class="hljs-built_in">insert</span>(set1.<span class="hljs-built_in">end</span>(), <span class="hljs-number">4</span>);<br><span class="hljs-comment">//使用范围迭代器插入</span><br>set1.<span class="hljs-built_in">insert</span>(set2.<span class="hljs-built_in">begin</span>(), set2.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><p>关于insert函数的返回值：<br>insert()只传入单个参数（待插入元素）</p><ol><li>会返回一个 pair 对象</li><li>这个 pair 对象包含一个迭代器，以及一个附加的布尔值用来说明插入是否成功</li><li>如果元素被插入，返回的迭代器会指向新元素</li><li>如果没有被插入，迭代器指向阻止插入的元素<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> pr = words.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;ninety&quot;</span>); <span class="hljs-comment">// Returns a pair - an iterator &amp; a bool value</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>insert()传入两个参数（迭代器+待插入元素）</strong></p><ol><li>插入初始化表中的元素</li><li>在这种情况下，什么都没有返回</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">words.<span class="hljs-built_in">insert</span>(&#123;<span class="hljs-string">&quot;ten&quot;</span>, <span class="hljs-string">&quot;seven&quot;</span>, <span class="hljs-string">&quot;six&quot;</span>&#125;);  <span class="hljs-comment">// Inserting an initializer list</span><br></code></pre></td></tr></table></figure><p><strong>emplace()函数——插入元素(转移构造)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//使用转移构造函数添加新元素3，比insert效率高</span><br>set1.<span class="hljs-built_in">emplace</span>(<span class="hljs-number">3</span>);<br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//删除操作，成功返回1，失败返回0</span><br>set1.<span class="hljs-built_in">erase</span>(<span class="hljs-number">1</span>);<br><span class="hljs-comment">//删除操作，成功返回下一个pair的迭代器</span><br>set1.<span class="hljs-built_in">erase</span>(set1.<span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>));<br><span class="hljs-comment">//删除set1的所有元素，返回指向end的迭代器</span><br>set1.<span class="hljs-built_in">erase</span>(set1.<span class="hljs-built_in">begin</span>(), set1.<span class="hljs-built_in">end</span>());<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>study-linux</title>
    <link href="/2024/03/07/study-linux/"/>
    <url>/2024/03/07/study-linux/</url>
    
    <content type="html"><![CDATA[<h2 id="linux-指令"><a href="#linux-指令" class="headerlink" title="linux-指令"></a>linux-指令</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>my new post</title>
    <link href="/2024/03/07/my-new-post/"/>
    <url>/2024/03/07/my-new-post/</url>
    
    <content type="html"><![CDATA[<h2 id="linux-指令"><a href="#linux-指令" class="headerlink" title="linux 指令"></a>linux 指令</h2><p>密码：1</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/01/23/hello-world/"/>
    <url>/2024/01/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
